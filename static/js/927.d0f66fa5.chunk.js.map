{"version":3,"file":"static/js/927.d0f66fa5.chunk.js","mappings":"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","sources":["components/TMDB-Api/FetchMovies.js","webpack://react-homework-template/./src/pages/MovieDetails/MovieDetails.module.css?0c24","webpack://react-homework-template/./src/components/ButtonBack/ButtonBack.module.css?8b4f","components/ButtonBack/ButtonBack.js","pages/MovieDetails/MovieDetails.js"],"sourcesContent":["import axios from 'axios';\n\nconst apiKey = '9d7a39f8c7043e83eaf145d46d730826';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${apiKey}`\n  );\n\n  return response.data.results;\n};\n\nexport const fetchSearch = async (searchQuery, pageNumber) => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&language=en-US&query=${searchQuery}&page=${pageNumber}&include_adult=false`\n  );\n\n  return response.data.results;\n};\n\nexport const fetchDetails = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}&language=en-US`\n  );\n\n  return response.data;\n};\n\nexport const fetchCast = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n  );\n\n  return response.data.results;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movieBox\":\"MovieDetails_movieBox__pi2XS\",\"descBox\":\"MovieDetails_descBox__eCGYT\",\"linksBox\":\"MovieDetails_linksBox__EBPhM\",\"linkMore\":\"MovieDetails_linkMore__uu+Pj\"};","// extracted by mini-css-extract-plugin\nexport default {\"btnBack\":\"ButtonBack_btnBack__tjozC\"};","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nimport clsx from 'clsx';\nimport css from '../ButtonBack/ButtonBack.module.css';\n\nexport const ButtonBack = () => {\n  const location = useLocation();\n  const defaultHref = location.state.from || location.state.movieList;\n\n  return (\n    <Link to={defaultHref} className={clsx(css.btnBack)}>\n      Go back\n    </Link>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\n\nimport clsx from 'clsx';\nimport css from '../MovieDetails/MovieDetails.module.css';\n\nimport { fetchDetails } from 'components/TMDB-Api/FetchMovies';\nimport { ButtonBack } from 'components/ButtonBack/ButtonBack';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const location = useLocation();\n\n  const [details, setDetails] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const { movieId } = useParams();\n\n  const { title, poster_path, vote_average, overview, genres } = details;\n  const hrefToPoster = `https://image.tmdb.org/t/p/w300/${poster_path}`;\n\n  // obsługa zapytania o szczegóły filmu\n\n  useEffect(() => {\n    const handleMovieDetails = async () => {\n      setIsLoading(true);\n\n      try {\n        const clickedMovieDetails = await fetchDetails(movieId);\n        setDetails(clickedMovieDetails);\n      } catch (err) {\n        console.error(err);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    handleMovieDetails();\n  }, [movieId]);\n\n  return (\n    <>\n      <ButtonBack />\n      <div className={clsx(css.movieBox)}>\n        <img src={hrefToPoster} alt={title} />\n        <div>\n          <h3>{title}</h3>\n          <p>User score: {vote_average}</p>\n          <div className={clsx(css.descBox)}>\n            <h4>OVERVIEW</h4>\n            <p>{overview}</p>\n          </div>\n          <div className={clsx(css.descBox)}>\n            <h4>GENRES</h4>\n            <ul>\n              {!genres ? (\n                <></>\n              ) : (\n                genres.map(genre => <li key={genre.id}>{genre.name}</li>)\n              )}\n            </ul>\n          </div>\n        </div>\n      </div>\n      <div>DETAILS</div>\n      {isLoading && <Loader />}\n\n      <div className={clsx(css.linksBox)}>\n        <Link\n          to=\"cast\"\n          state={{ movieList: location.state.from || location.state.movieList }}\n          className={clsx(css.linkMore)}\n        >\n          Cast\n        </Link>\n        <Link\n          to=\"reviews\"\n          state={{ movieList: location.state.from || location.state.movieList }}\n          className={clsx(css.linkMore)}\n        >\n          Reviews\n        </Link>\n      </div>\n      <Outlet />\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["apiKey","fetchTrending","axios","response","data","results","fetchSearch","searchQuery","pageNumber","fetchDetails","movieId","fetchCast","cast","fetchReviews","ButtonBack","location","useLocation","defaultHref","state","from","movieList","to","className","clsx","css","useState","details","setDetails","isLoading","setIsLoading","useParams","title","poster_path","vote_average","overview","genres","hrefToPoster","useEffect","handleMovieDetails","clickedMovieDetails","console","error","src","alt","map","genre","name","id","Loader"],"sourceRoot":""}